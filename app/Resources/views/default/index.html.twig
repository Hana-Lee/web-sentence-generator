{% extends 'base.html.twig' %}
{% block stylesheets %}
    <style type="text/css">
        body {
            background-color: #ddd;
        }
        .webix_view, .webix_el_box .webixtype_form {
            font-family: 'PT Sans', Tahoma, 'Nanum Gothic', 'Malgun Gothic', serif;
        }
        .t_center .webix_cell {
            text-align: center;
        }
        .webix_view.webix_form.word_input {
            border-radius: 6px;
        }
        .word_input.dt_noun {
            background-color: #CD812B;
        }
        .word_input.dt_verb {
            background-color: #F17075;
        }
        .word_input.dt_adverb {
            background-color: #7B6A97;
        }
        .word_input.dt_adjective {
            background-color: #608F63;
        }
        .word_input .webix_el_label {
            font-size: 30px;
            color: whitesmoke;
        }
        .main_container {
            margin: 0 auto;
        }
        .hide {
            display:none !important;
        }
        .inline_block {
            display: inline-block;
        }
        .love_heart {
            width: 100%;
            height: 100%;
            margin: auto 0;
            background-image: url({{ asset('images/love_heart_512.png') }});
        }
        .love_heart div {
            font-size: 50px;
            margin: auto 0;
            padding-top: 200px;
            text-align: center;
        }
        .webix_ss_header .webix_hs_center table td div.webix_hcell {
            text-align: center;
        }
        .new_word_value {
            background-color:#FFAAAA;
        }
        .word_datatable_row_hover {
            background-color:#F0DCB6;
        }
        .checked_row {
            background-color: #DDFFDD;
        }
        .webix_cell p {
            margin: 0;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" charset="UTF-8">
        "use strict";

        webix.i18n.setLocale("ko-KR");

        function isUndefined(value) {return typeof value === "undefined";}

        if (isUndefined(window.sg)) {
            window.sg = {};
        }

        var sgWord = {
            noun: {id: "noun", name: "명사", code: 0},
            verb: {id: "verb", name: "동사", code: 1},
            adverb: {id: "adverb", name: "부사", code: 2},
            adjective: {id: "adjective", name: "형용사", code: 3}
        };

        var sgGenre = {
            poetry : {id:"poetry", name:"시", code:0},
            nursery_rime : {id:"nursery_rime", name:"동시", code:1},
            novel : {id:"novel", name:"소설", code:2},
            essay : {id:"essay", name:"수필", code:3},
            fairy_tail : {id: "fairy_tail", name : "동화", code:4}
        };

        var sgContext = {
            currentMenuId : "show_word"
        };

        var sgRateCharacter = {
            1 : "★☆☆☆☆",
            2 : "★★☆☆☆",
            3 : "★★★☆☆",
            4 : "★★★★☆",
            5 : "★★★★★"
        };

        sg.context = sgContext;
        sg.word = sgWord;
        sg.genre = sgGenre;
        sg.dataTable = {
            prefix : "dt_"
        };
        sg.rateCharacter = sgRateCharacter;

        function showLovePopup() {
            webix.ui({
                view:"popup",
                width: 542, height:542,
                position:"center",
                head:"사랑합니다",
                body: {
                    template:"<div class='love_heart'><div>사랑합니다</div></div>"
                }
            }).show();
        }

        function makeWordDataTable(word, genre) {
            return {
                id: sg.dataTable.prefix + word.id, view: "datatable", columns: [
                    {id: "number", header: "No.", width: 50, css: "t_center"},
                    {id: "status", header: {content: "masterCheckbox"}, template: "{common.checkbox()}", width: 40},
                    {id: "word", header: "단어", sort:"string", fillspace: true},
                    {id: "created", header: "만든날", sort:"int", format:webix.i18n.fullDateFormatStr, width: 200, css: "t_center"}
                ],
                data: getWordData(word, genre),
                schema:{
                    $change:function(item) {
                        console.log(item);
                    }
                },
                hover:"word_datatable_row_hover",
                select:false,
                on : {
                    onItemClick : function(id, event, node) {
                        var item = this.getItem(id.row);
                        item.status = !item.status;
                        if (item.status) {
                            this.addRowCss(id.row, "checked_row");
                        } else {
                            this.removeRowCss(id.row, "checked_row");
                        }
                        this.refresh(id.row);
                    }
                }
            }
        }

        function makeFavoriteDataTable(favoriteType, rate) {
            return {
                id: sg.dataTable.prefix + favoriteType, view: "datatable", columns: [
                    {id: "number", header: "No.", width: 50, css: "t_center"},
                    {id: "status", header: {content: "masterCheckbox"}, template: "{common.checkbox()}", width: 40},
                    {id: "sentence", header: "문장", sort:"string", fillspace: true},
                    {id: "star", header: "평가", sort:"string", width: 100, css: "t_center"},
                    {id: "created", header: "만든날", sort:"int", format:webix.i18n.fullDateFormatStr, width: 200, css: "t_center"}
                ],
                data: getFavoriteItemByRate(rate),
                schema:{
                    $change:function(item) {
                        console.log(item);
                    }
                },
                hover:"word_datatable_row_hover",
                select:false,
                on : {
                    onItemClick : function(id, event, node) {
                        var item = this.getItem(id.row);
                        item.status = !item.status;
                        if (item.status) {
                            this.addRowCss(id.row, "checked_row");
                        } else {
                            this.removeRowCss(id.row, "checked_row");
                        }
                        this.refresh(id.row);
                    }
                }
            }
        }

        function getWordDataFromServer(word, genre) {
            var jsonData = webix.ajax().sync().post("get/word/" + word.code + "/" + genre.code);
            var statusCode = jsonData.status;
            var result = [];
            if (statusCode === 200) {
                result = JSON.parse(jsonData["response"]);
                var count = 1;
                $(result).each(function(index, value) {
                    value["status"] = 0;
                    value["number"] = count++;
                    value["created"] = new Date(Number(value["created"]));
                    result[index] = value;
                });
            }
            return result;
        }

        function getWordData(word, genre) {
            return getWordDataFromServer(word, genre);
        }

        function getWordCountInGenreFromServer(genre) {
            var countData = webix.ajax().sync().post("get/word/count/genre/" + genre.code);
            var statusCode = countData.status;
            var result = 0;
            if (statusCode === 200) {
                result = countData.response;
            }
            return result;
        }

        function getWordCountInGenre(genre) {
            return getWordCountInGenreFromServer(genre);
        }

        function getGenreData() {
            var result = [];
            for(var key in sg.genre) {
                if (sg.genre.hasOwnProperty(key)) {
                    var genre = sg.genre[key];
                    var count = getWordCountInGenre(genre);
                    result.push({id:genre.id, icon:"support", value : genre.name, badge:count});
                }
            }

            return result;
        }

        function updateWordDataTable(genre) {
            var availableWords = sg.word;
            for(var key in availableWords) {
                if (availableWords.hasOwnProperty(key)) {
                    var wordData = getWordData(availableWords[key], genre);
                    $$(sg.dataTable.prefix + availableWords[key].id).clearAll();
                    $$(sg.dataTable.prefix + availableWords[key].id).parse(wordData);
                }
            }
        }

        function clearAllWordDataTable() {
            var availableWords = sg.word;
            for(var key in availableWords) {
                if (availableWords.hasOwnProperty(key)) {
                    $$(sg.dataTable.prefix + availableWords[key].id).clearAll();
                }
            }
        }

        function makeNewWordData(newWordValue) {
            var dateObj = new Date();
            var currentTime = dateObj.getTime();
            return {id:currentTime, status:0, number: 0, word:newWordValue, wordType:0, genreType:0, created:dateObj, backup:0};
        }

        function addNewWord(word, genre) {
            var newWordValue = $$("new_word_input").getValue();
            if (newWordValue !== "") {
                var currentTabBarItemId = $$(sg.dataTable.prefix + "tabbar").getValue();
                var currentWordId = currentTabBarItemId.replace(sg.dataTable.prefix, "");
                var currentWord = sg.word[currentWordId];
                var currentGenreId = $$("side_menu").getSelectedItem().id;
                var currentGenre = sg.genre[currentGenreId];

                var newData = addNewWordToServer(currentWord, currentGenre, newWordValue);
                $$(currentTabBarItemId).add(newData, 0);
                $$(currentTabBarItemId).addRowCss(newData.id, "new_word_value");
            }
        }

        function addNewWordToServer(word, genre, newWord) {
            var dateObj = new Date();
            var currentTime = dateObj.getTime();
            var newWordResponseData = webix.ajax().sync().post("add/word/" + word.code + "/" + genre.code + "/" + newWord + "/" + currentTime);
            var result = {};
            if (newWordResponseData.status === 200) {
                var jsonData = JSON.parse(newWordResponseData.response);
                jsonData["status"] = 0;
                jsonData["number"] = 0;
                jsonData["created"] = new Date(Number(jsonData["created"]));

                result = jsonData;
            }

            return result;
        }

        function getFavoriteRateItemCount(rate) {
            var itemCountResult = webix.ajax().sync().post("get/favorite/rate/count/" + rate);
            var result = 0;
            if (itemCountResult.status === 200) {
                result = itemCountResult.response;
            }

            return result;
        }

        function getFavoriteCategoriesFromServer() {
            var favoriteCategoriesResult = webix.ajax().sync().post("get/favorite/category");
            var result = [];
            if (favoriteCategoriesResult.status === 200) {
                result = JSON.parse(favoriteCategoriesResult.response);

                $(result).each(function(index, category) {
                    category["value"] = category.name;
                    category["icon"] = "support";
                    category["badge"] = getFavoriteCategoryItemCount(category.id);

                    result[index] = category;
                });
            }

            return result;
        }

        function getFavoriteCategoryItemCount(categoryId) {
            var favoriteCategoryItemCountResult = webix.ajax().sync().post("get/favorite/category/item/count/" + categoryId);
            var result = 0;
            if (favoriteCategoryItemCountResult.status === 200) {
                result = favoriteCategoryItemCountResult.response;
            }

            return result;
        }

        function getFavoriteItemByRate(rate) {
            var favoriteRateItemResult = webix.ajax().sync().post("get/favorite/rate/item/" + rate);

            var result = [];
            if (favoriteRateItemResult.status === 200) {
                result = JSON.parse(favoriteRateItemResult.response);

                var count = 1;
                $(result).each(function(index, favorite) {
                    favorite["status"] = 0;
                    favorite["created"] = new Date(Number(favorite["created"]));
                    favorite["number"] = count++;
                    var rateValue = favorite["rate"];
                    favorite["star"] = sg.rateCharacter[rateValue];

                    result[index] = favorite;
                });
            }

            return result;
        }

        function showWaitDialog() {
            $.blockUI({ css: {
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .5,
                color: '#fff'
            } });
//            $$("main_container").disable();
//            $$("main_container").showProgress({type:"icon", delay:1, icon:"spinner"});
        }

        function hideWaitDialog() {
            $.unblockUI();
//            $$("main_container").enable();
//            $$("main_container").hideProgress();
        }

        var topToolbar = {
            id:"toolbar", view:"toolbar",cols:[
                { view:"label", template: "Sentence Generator 시어 생성기 사랑합니다♥"},
                {
                    id:"show_word", view:"button", type:"icon", icon:"envelope", label:"단어보기", width:100, align:"left", on:{
                        onItemClick:function(id) {
//                            showWaitDialog();
                            if (sg.context.currentMenuId !== "show_word") {
                                $$("body_layout").removeView("side_menu");
                                $$("body_layout").addView(webix.copy(wordListMenu), 0);
                                $$("side_menu").select(sg.genre.poetry.id);
                            }

                            sg.context.currentMenuId = "show_word";

//                            hideWaitDialog();
                        }
                    }
                },
                {
                    id:"show_favorite", view:"button", type:"icon", icon:"users", label:"즐겨찾기", width:100, align:"left", on:{
                        onItemClick:function(id) {
                            // TODO : 데이터 가지고 오는 동안 잠시 기다려주세요 띄워주는 기능 추가 하기
                            // (현재는 첫줄에 함수 호출 하여도 데이터를 다 가지고 올 때까지 다이얼로그가 안뜸)

//                            showWaitDialog();

                            if (sg.context.currentMenuId !== "show_favorite") {
                                $$("body_layout").removeView("side_menu");
                                $$("body_layout").addView(webix.copy(makeFavoriteMenu()), 0);
                            }

                            sg.context.currentMenuId = "show_favorite";

//                            hideWaitDialog();
                        }
                    }
                },
                {
                    id:"show_generate", view:"button", type:"icon", icon:"cog", label:"문장생성", width:100, align:"left", on:{
                        onItemClick:function(id) {
//                            showWaitDialog();
                            console.log("show generate");
                            if (sg.context.currentMenuId !== "show_generate") {
                                $$("body_layout").removeView("side_menu");
                                $$("body_layout").addView(webix.copy(makeGenerateMenu()), 0);
                            }

                            sg.context.currentMenuId = "show_generate";

//                            hideWaitDialog();
                        }
                    }
                }
            ],
            on: {
                onChange:function() {
                    console.log(arguments);
                }
            }
        };

        var wordInputForm = {
            view: "form", id: "word_input_form", css: "word_input " + sg.dataTable.prefix + "noun", elements: [
                {id:"word_input_title", view: "label", label: "명사"},
                {
                    cols: [
                        {
                            id: "new_word_input", view: "text", label: "", on:{
                                onKeyPress: function(keyCode, event) {
                                    if (keyCode === 13) {
                                        showLovePopup();
                                    }
                                }
                            }
                        },
                        {
                            view: "button", value: "입력", type: "form", width: 100, on:{
                                onItemClick: function(id, event) {
                                    addNewWord();
                                    return false;
                                }
                            }
                        }
                    ]
                }
            ]
        };

        var wordListTabBar = {
            id:sg.dataTable.prefix + "tabbar", view: "tabbar", value:sg.dataTable.prefix + sg.word.noun.id, multiview:true, options: [
                {id: sg.dataTable.prefix + sg.word.noun.id, value: sg.word.noun.name},
                {id: sg.dataTable.prefix + sg.word.verb.id, value: sg.word.verb.name},
                {id: sg.dataTable.prefix + sg.word.adverb.id, value: sg.word.adverb.name},
                {id: sg.dataTable.prefix + sg.word.adjective.id, value: sg.word.adjective.name}
            ],
            on: {
                onAfterTabClick: function(id, event) {
                    console.log("on after");
                },
                onBeforeTabClick: function(id, event) {
                },
                onChange: function(newValue, oldValue) {
                    var wordInputTitle = $$("word_input_title");
                    var $wordInputTitle = jQuery("div[view_id='word_input_form']");
                    $wordInputTitle.removeClass(oldValue).addClass(newValue);
                    if (newValue == sg.dataTable.prefix + sg.word.noun.id) {
                        wordInputTitle.setValue(sg.word.noun.name);
                    } else if (newValue == sg.dataTable.prefix + sg.word.verb.id) {
                        wordInputTitle.setValue(sg.word.verb.name);
                    } else if (newValue == sg.dataTable.prefix + sg.word.adverb.id) {
                        wordInputTitle.setValue(sg.word.adverb.name);
                    } else if (newValue == sg.dataTable.prefix + sg.word.adjective.id) {
                        wordInputTitle.setValue(sg.word.adjective.name);
                    }
                }
            }
        };

        var nounDataTable = makeWordDataTable(sg.word.noun, sg.genre.poetry);
        var verbDataTable = makeWordDataTable(sg.word.verb, sg.genre.poetry);
        var adverbDataTable = makeWordDataTable(sg.word.adverb, sg.genre.poetry);
        var adjectiveDataTable = makeWordDataTable(sg.word.adjective, sg.genre.poetry);

        var wordLists = {
            id:"data_table_cells",
            cells:[
                nounDataTable,
                verbDataTable,
                adverbDataTable,
                adjectiveDataTable
            ]
        };

        function makeFavoriteRateMenu() {
            return {
                id: "fav_rate_menu", view: "menu", layout: "y", select: true, width: 240, data: [
                    {id: 5, icon: "support", value: "♥♥♥♥♥", badge: getFavoriteRateItemCount(5)},
                    {id: 4, icon: "support", value: "♥♥♥♥♡", badge: getFavoriteRateItemCount(4)},
                    {id: 3, icon: "support", value: "♥♥♥♡♡", badge: getFavoriteRateItemCount(3)},
                    {id: 2, icon: "support", value: "♥♥♡♡♡", badge: getFavoriteRateItemCount(2)},
                    {id: 1, icon: "support", value: "♥♡♡♡♡", badge: getFavoriteRateItemCount(1)}
                ],
                on: {
                    onMenuItemClick: function (id) {
                        // TODO : 클릭시 데이터 테이블 새로 만들고 DB로부터 가지고온 데이터 넣기.
//                        $$("content_container").removeView(sg.dataTable.prefix + "tabbar");
//                        $$("content_container").removeView("data_table_cells");
//
//                        $$("content_container").addView(makeFavoriteDataTable("rate", 5));
//                        makeFavoriteDataTable("rate", 5);
                        var result = getFavoriteItemByRate(5);
                        var wordInputTitle = $$("word_input_title");
                        wordInputTitle.setValue(result[0].sentence);
                        $$("dt_noun").getItem(1145).word = result[0].sentence;
                        console.log(id);
                    }
                }
            };
        }

        function makeFavoriteCategoryMenu() {
            return {
                id: "fav_name_menu", view: "menu", layout: "y", select:true, width: 240, scroll:"y",
                data: getFavoriteCategoriesFromServer(),
                on: {
                    onMenuItemClick: function (id) {
                        console.log(id);
                    }
                }
            };
        }

        function makeFavoriteMenu() {
            return {
                id: "side_menu", view: "tabview", width: 242, cells: [
                    {
                        id: "fav_name", header: "이름별", body : makeFavoriteCategoryMenu()
                    },
                    {
                        id: "fav_rate", header: "평가별", body : makeFavoriteRateMenu()
                    }
                ]
            };
        }

        function makeGenerateMenu() {
            return {
                id: "side_menu", view: "menu", layout: "y", select:true, width: 240, data: [
                    {id: 1, icon: "support", value: "문장생성", badge: "12"}
                ],
                on: {
                    onMenuItemClick: function (id) {
                        console.log(id);
                    }
                }
            };
        }

        var wordListMenu = {
            id: "side_menu", view: "menu", layout: "y", select: true, width: 240, data: getGenreData(),
            on: {
                onMenuItemClick: function (id) {
                    var selectedItem = this.getItem(id);
                    var badgeValue = Number(selectedItem.badge);
                    if (badgeValue > 0) {
                        var selectedGenre = sg.genre[id];
                        updateWordDataTable(selectedGenre);
                    } else {
                        clearAllWordDataTable();
                    }
                }
            }
        };

        var bodyLayout = {
            id:"body_layout",
            cols: [
                wordListMenu,
                {$template: "Spacer", width: 10},
                {
                    id:"content_container", rows: [
                        wordInputForm,
                        {$template: "Spacer", height: 10},
                        wordListTabBar,
                        wordLists
                    ]
                }
            ]
        };

        webix.ui({
            id:"main_container", type:"wide", css:"main_container", cols:[
                {
                    type: "space", width:960, rows: [
                        topToolbar,
                        bodyLayout
                    ]
                }
            ]
        });

        webix.extend($$("main_container"), webix.ProgressBar);

        $$("side_menu").select(sg.genre.poetry.id);
        $$("word_input_title").setValue(sg.word.noun.name);
    </script>
{% endblock %}
